use std::error::Error;
use std::process::exit;

use anyhow::Context;
use clap::Parser;
use log::{debug, info, warn};
use notify_rust::{Notification, Urgency};
use tokio::sync::Mutex;

use hyprswitch::{ACTIVE, cli, Command, Config, DRY, GuiConfig};
use hyprswitch::cli::App;
use hyprswitch::client::{daemon_running, send_init_command, send_kill_daemon, send_switch_command};
use hyprswitch::daemon::{deactivate_submap, start_daemon};
use hyprswitch::handle::{collect_data, find_next_client, switch_async};

#[tokio::main]
async fn main() -> Result<(), Box<dyn Error>> {
    let cli = App::try_parse()
        .unwrap_or_else(|e| {
            // only show error if not caused by --help ort -V (every start of every help text needs to be added...)
            if !(e.to_string().starts_with("A CLI/GUI that allows switching between windows in Hyprland") ||
                e.to_string().starts_with("Opens the GUI") ||
                e.to_string().starts_with("Initialize and start the Daemon") ||
                e.to_string().starts_with("Used to send commands to the daemon (used in keymap that gets generated by gui)") ||
                e.to_string().starts_with("Switch without using the GUI / Daemon (switches directly)") ||
                e.to_string().starts_with("Close the GUI, executes the command to switch window") || e.to_string() == format!("hyprswitch {}\n", option_env!("CARGO_PKG_VERSION").unwrap_or("?.?.?"))) {
                let _ = Notification::new()
                    .summary(&format!("Hyprswitch ({}) Error", option_env!("CARGO_PKG_VERSION").unwrap_or("?.?.?")))
                    .body("Unable to parse CLI Arguments (visit https://github.com/H3rmt/hyprswitch/blob/main/README.md to see config)")
                    .timeout(10000)
                    .hint(notify_rust::Hint::Urgency(Urgency::Critical))
                    .show();
            }
            eprintln!("{}", e);
            exit(1);
        });
    stderrlog::new().module(module_path!()).verbosity(cli.global_opts.verbose as usize + 1).init()
        .context("Failed to initialize logging :(").unwrap_or_else(|e| warn!("{:?}", e));

    DRY.set(cli.global_opts.dry_run).expect("unable to set DRY (already filled???)");
    ACTIVE.set(Mutex::new(false)).expect("unable to set ACTIVE (already filled???)");

    match cli.command {
        cli::Command::Init { custom_css, show_title } => {
            if daemon_running().await {
                warn!("Daemon already running");
                return Ok(());
            }
            info!("Starting daemon");
            start_daemon(custom_css, show_title).await
                .context("Failed to run daemon")
                .inspect_err(|_| {
                    let _ = deactivate_submap();
                })?;
            return Ok(());
        }
        cli::Command::Close { kill } => {
            info!("Stopping daemon");

            if !daemon_running().await {
                warn!("Daemon not running");
                return Ok(());
            }

            send_kill_daemon(kill).await.context("Failed to send kill command to daemon")?;
        }
        cli::Command::Dispatch { simple_opts } => {
            let command = Command::from(simple_opts);
            send_switch_command(command).await
                .with_context(|| format!("Failed to send switch command with command {command:?} to daemon"))?;
        }
        cli::Command::Gui { gui_config, config } => {
            if !daemon_running().await {
                let _ = Notification::new()
                    .summary(&format!("Hyprswitch ({}) Error", option_env!("CARGO_PKG_VERSION").unwrap_or("?.?.?")))
                    .body("Daemon not running (add ``exec-once = hyprswitch init &``) to your Hyprland config\n(visit https://github.com/H3rmt/hyprswitch/blob/main/README.md to see GUI configs)")
                    .timeout(10000)
                    .hint(notify_rust::Hint::Urgency(Urgency::Critical))
                    .show();
                return Err(Box::from(anyhow::anyhow!("Daemon not running")));
            }

            // Daemon is not running
            info!("initialising daemon");
            let gui_config = GuiConfig::from(gui_config);
            let config = Config::from(config);
            send_init_command(config.clone(), gui_config.clone()).await
                .with_context(|| format!("Failed to send init command with config {config:?} and gui_config {gui_config:?} to daemon"))?;

            return Ok(());
        }
        cli::Command::Simple { simple_opts, simple_conf } => {
            let config = Config::from(simple_conf);
            let (clients_data, active_address) = collect_data(config.clone()).await.with_context(|| format!("Failed to collect data with config {config:?}"))?;
            debug!("Clients data: {:?}", clients_data);

            let command = Command::from(simple_opts);
            let (next_client, _) = find_next_client(command, &clients_data.enabled_clients, active_address.as_ref()).with_context(|| format!("Failed to find next client with command {command:?}"))?;
            info!("Next client: {:?}", next_client.class);

            switch_async(next_client, *DRY.get().expect("DRY not set")).await.with_context(|| format!("Failed to execute with next_client {next_client:?}"))?;
        }
    };
    return Ok(());
}